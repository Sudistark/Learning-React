{"version":3,"sources":["addForm.js","todos.js","App.js","serviceWorker.js","index.js"],"names":["AddTodo","state","content","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addTodo","onSubmit","this","type","onChange","Component","Todos","todoList","todos","length","map","todo","className","key","id","onClick","deleteTodo","App","todoNew","filter","Math","random","newTodo","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8MAwCeA,E,4MApCXC,MAAQ,CACJC,QAAS,I,EAGbC,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVH,QAASE,EAAEE,OAAOC,S,EAK1BC,aAAe,SAACJ,GACZA,EAAEK,iBACF,EAAKC,MAAMC,QAAQ,EAAKV,OACxB,EAAKI,SAAS,CACVH,QAAS,M,uDAUb,OACI,6BACI,0BAAMU,SAAUC,KAAKL,cACjB,gDACA,2BAAOM,KAAK,OAAOC,SAAUF,KAAKV,aAAcI,MAAOM,KAAKZ,MAAMC,gB,GA/BhEc,aC0BPC,EA1BD,SAACP,GACX,IAAMQ,EAAWR,EAAMS,MAAMC,OACzBV,EAAMS,MAAME,KAAI,SAAAC,GACZ,OACI,yBAAKC,UAAU,kBAAkBC,IAAKF,EAAKG,IACvC,0BAAMC,QAAS,WAAMhB,EAAMiB,WAAWL,EAAKG,MAAOH,EAAKpB,aAKnE,uBAAGqB,UAAU,cAAb,qBAKJ,OACI,yBAAKA,UAAU,oBACVL,ICqCEU,E,4MAlDb3B,MAAQ,CACNkB,MAAO,CACL,CAACM,GAAG,EAAGvB,QAAS,uBAChB,CAACuB,GAAG,EAAGvB,QAAQ,uB,EAInByB,WAAa,SAACF,GACZ,IAAII,EAAU,EAAK5B,MAAMkB,MAAMW,QAAO,SAAAR,GACpC,OAAOA,EAAKG,KAAOA,KAOrB,EAAKpB,SAAS,CACZc,MAAOU,K,EAOXlB,QAAU,SAACW,GACTA,EAAKG,GAAKM,KAAKC,SACf,IAAIC,EAAO,sBAAO,EAAKhC,MAAMkB,OAAlB,CAAyBG,IACpCY,QAAQC,IAAIF,GAEZ,EAAK5B,SAAS,CACZc,MAAOc,K,uDAOX,OACE,yBAAKV,UAAU,sBACX,wBAAIA,UAAU,oBAAd,UACA,kBAAC,EAAD,CAAOJ,MAAON,KAAKZ,MAAMkB,MAAOQ,WAAYd,KAAKc,aACjD,kBAAC,EAAD,CAAShB,QAASE,KAAKF,e,GA1CbK,aCOEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,a","file":"static/js/main.38a155a3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass AddTodo extends Component{\r\n\r\n    state = {\r\n        content: ''\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            content: e.target.value\r\n        })\r\n\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state);\r\n        this.setState({\r\n            content: ''\r\n        })\r\n        \r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <lable>Add new todo:</lable>\r\n                    <input type=\"text\" onChange={this.handleChange} value={this.state.content}/>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTodo;","import React from 'react';\r\n\r\nconst Todos = (props) => {\r\n    const todoList = props.todos.length ? (\r\n        props.todos.map(todo => {\r\n            return (\r\n                <div className=\"collection-item\" key={todo.id}>\r\n                    <span onClick={()=> {props.deleteTodo(todo.id)}}>{todo.content}</span>\r\n\r\n                </div>  )\r\n        })\r\n    ) : (\r\n        <p className=\"msg center\"> No todos for you</p>\r\n    );\r\n\r\n\r\n    //console.log(props.todos)\r\n    return (\r\n        <div className=\"todos collection\">\r\n            {todoList}\r\n\r\n\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Todos;","import React, { Component } from 'react';\nimport AddTodo from './addForm';\nimport Todos from './todos';\n\n\nclass App extends Component{\n  state = {\n    todos: [\n      {id:1, content: \"Go out do something\"},\n      {id:2, content:\"Go play something\"}\n    ]\n  }\n\n  deleteTodo = (id) =>{\n    let todoNew = this.state.todos.filter(todo => {\n      return todo.id !== id\n    })\n\n    //filter method is a non desctructive method way which creates anew aaray\n    //filter if returns false for a particular id , it will remove it from the array . True to keep that elemet in the array\n\n    //Now e need to change the state of the component\n    this.setState({\n      todos: todoNew\n    })\n    //console.log(id);\n\n\n  }\n\n  addTodo = (todo) => {\n    todo.id = Math.random()\n    let newTodo = [...this.state.todos, todo]\n    console.log(newTodo)\n\n    this.setState({\n      todos: newTodo\n    })\n\n  }\n//state-> object and todos-> array\n\nrender(){\n  return(\n    <div className=\"todo-app container\">\n        <h1 className=\"center blue-text\">Todo's</h1>\n        <Todos todos={this.state.todos} deleteTodo={this.deleteTodo}/>\n        <AddTodo addTodo={this.addTodo}/>\n\n    </div>\n\n  );\n}\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}